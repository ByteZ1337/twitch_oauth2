name: CI
env:
  CI_TWITCH_OAUTH2_FEATURES: "all mock_api"
on:
  pull_request:
    branches: [master]
    types: [opened, reopened, synchronize]
  push:
    branches: [master, staging, trying]
jobs:
  ci:
    name: CI
    needs: [test, fmt, clippy, docs]
    runs-on: ubuntu-latest
    steps:
      - name: Done
        run: exit 0
  test:
    name: Tests
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest]
        rust: [1.60.0, nightly]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          override: true
      - name: Ready cache
        if: matrix.os == 'ubuntu-latest'
        run: sudo chown -R $(whoami):$(id -ng) ~/.cargo/
      - name: Cache cargo
        uses: actions/cache@v1
        id: cache
        with:
          path: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Test twitch_oauth2
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --all-targets --features "${{ env.CI_TWITCH_OAUTH2_FEATURES }}"
  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true
          components: rustfmt
      - name: Run fmt --all -- --check
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check
  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true
          components: clippy
      - name: Cache cargo
        uses: actions/cache@v1
        id: cache
        with:
          path: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Run clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --locked
      - name: Run clippy --all-targets --all-features
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --locked --all-targets --all-features
  docs:
    name: Docs
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true
      - name: Cache cargo
        uses: actions/cache@v1
        id: cache
        with:
          path: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      # We do the following to make sure docs.rs can document properly without anything broken, and that docs are working.
      - name: Run doc tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --doc --all-features
      - name: Check twitch_oauth2 docs
        uses: actions-rs/cargo@v1
        env:
          RUSTDOCFLAGS: "--cfg nightly"
          RUSTFLAGS: "--cfg nightly"
        with:
          command: doc
          args: --locked --no-deps --features "${{ env.CI_TWITCH_OAUTH2_FEATURES }}"
  release:
    name: Release
    runs-on: ubuntu-latest
    if: startsWith(github.head_ref, 'release-') || startsWith(github.ref, 'release-')
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: false
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true
      - name: Run dry run publish
        uses: actions-rs/cargo@v1
        with:
          command: publish
          args: --dry-run --features "${{ env.CI_TWITCH_OAUTH2_FEATURES }}"